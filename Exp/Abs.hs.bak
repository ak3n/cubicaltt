-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Exp.Abs where

import Prelude (Char, Double, Integer, String, Int)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype AIdent = AIdent ((Int,Int),String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CIdent = CIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype HoleIdent = HoleIdent ((Int,Int),String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Module = Module AIdent [Imp] [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Imp = Import AIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl
    = DeclDef AIdent [Tele] Exp ExpWhere
    | DeclData AIdent [Tele] [Label]
    | DeclHData AIdent [Tele] [Label]
    | DeclSplit AIdent [Tele] Exp [Branch]
    | DeclUndef AIdent [Tele] Exp
    | DeclMutual [Decl]
    | DeclOpaque AIdent
    | DeclTransparent AIdent
    | DeclTransparentAll
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExpWhere = Where Exp [Decl] | NoWhere Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = Let [Decl] Exp
    | Lam [PTele] Exp
    | PLam [AIdent] Exp
    | Split Exp [Branch]
    | Fun Exp Exp
    | Pi [PTele] Exp
    | Sigma [PTele] Exp
    | AppFormula Exp Formula
    | App Exp Exp
    | PathP Exp Exp Exp
    | Comp Exp Exp System
    | HComp Exp Exp System
    | Trans Exp Exp
    | Fill Exp Exp System
    | Glue Exp System
    | GlueElem Exp System
    | UnGlueElem Exp System
    | Id Exp Exp Exp
    | IdPair Exp System
    | IdJ Exp Exp Exp Exp Exp Exp
    | Fst Exp
    | Snd Exp
    | Pair Exp [Exp]
    | Var AIdent
    | PCon AIdent Exp
    | U
    | Hole HoleIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Dir = Dir0 | Dir1
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data System = System [Side]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Face = Face AIdent Dir
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Side = Side [Face] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Formula
    = Disj Formula Formula
    | Conj Formula CIdent Formula
    | Neg Formula
    | Atom AIdent
    | Dir Dir
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Branch
    = OBranch AIdent [AIdent] ExpWhere
    | PBranch AIdent [AIdent] [AIdent] ExpWhere
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Label
    = OLabel AIdent [Tele] | PLabel AIdent [Tele] [AIdent] System
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Tele = Tele AIdent [AIdent] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PTele = PTele Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

