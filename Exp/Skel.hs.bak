-- Haskell module generated by the BNF converter

module Exp.Skel where

import qualified Exp.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transAIdent :: Exp.Abs.AIdent -> Result
transAIdent x = case x of
  Exp.Abs.AIdent string -> failure x
transCIdent :: Exp.Abs.CIdent -> Result
transCIdent x = case x of
  Exp.Abs.CIdent string -> failure x
transHoleIdent :: Exp.Abs.HoleIdent -> Result
transHoleIdent x = case x of
  Exp.Abs.HoleIdent string -> failure x
transModule :: Exp.Abs.Module -> Result
transModule x = case x of
  Exp.Abs.Module aident imps decls -> failure x
transImp :: Exp.Abs.Imp -> Result
transImp x = case x of
  Exp.Abs.Import aident -> failure x
transDecl :: Exp.Abs.Decl -> Result
transDecl x = case x of
  Exp.Abs.DeclDef aident teles exp expwhere -> failure x
  Exp.Abs.DeclData aident teles labels -> failure x
  Exp.Abs.DeclHData aident teles labels -> failure x
  Exp.Abs.DeclSplit aident teles exp branchs -> failure x
  Exp.Abs.DeclUndef aident teles exp -> failure x
  Exp.Abs.DeclMutual decls -> failure x
  Exp.Abs.DeclOpaque aident -> failure x
  Exp.Abs.DeclTransparent aident -> failure x
  Exp.Abs.DeclTransparentAll -> failure x
transExpWhere :: Exp.Abs.ExpWhere -> Result
transExpWhere x = case x of
  Exp.Abs.Where exp decls -> failure x
  Exp.Abs.NoWhere exp -> failure x
transExp :: Exp.Abs.Exp -> Result
transExp x = case x of
  Exp.Abs.Let decls exp -> failure x
  Exp.Abs.Lam pteles exp -> failure x
  Exp.Abs.PLam aidents exp -> failure x
  Exp.Abs.Split exp branchs -> failure x
  Exp.Abs.Fun exp1 exp2 -> failure x
  Exp.Abs.Pi pteles exp -> failure x
  Exp.Abs.Sigma pteles exp -> failure x
  Exp.Abs.AppFormula exp formula -> failure x
  Exp.Abs.App exp1 exp2 -> failure x
  Exp.Abs.PathP exp1 exp2 exp3 -> failure x
  Exp.Abs.Comp exp1 exp2 system -> failure x
  Exp.Abs.HComp exp1 exp2 system -> failure x
  Exp.Abs.Trans exp1 exp2 -> failure x
  Exp.Abs.Fill exp1 exp2 system -> failure x
  Exp.Abs.Glue exp system -> failure x
  Exp.Abs.GlueElem exp system -> failure x
  Exp.Abs.UnGlueElem exp system -> failure x
  Exp.Abs.Id exp1 exp2 exp3 -> failure x
  Exp.Abs.IdPair exp system -> failure x
  Exp.Abs.IdJ exp1 exp2 exp3 exp4 exp5 exp6 -> failure x
  Exp.Abs.Fst exp -> failure x
  Exp.Abs.Snd exp -> failure x
  Exp.Abs.Pair exp exps -> failure x
  Exp.Abs.Var aident -> failure x
  Exp.Abs.PCon aident exp -> failure x
  Exp.Abs.U -> failure x
  Exp.Abs.Hole holeident -> failure x
transDir :: Exp.Abs.Dir -> Result
transDir x = case x of
  Exp.Abs.Dir0 -> failure x
  Exp.Abs.Dir1 -> failure x
transSystem :: Exp.Abs.System -> Result
transSystem x = case x of
  Exp.Abs.System sides -> failure x
transFace :: Exp.Abs.Face -> Result
transFace x = case x of
  Exp.Abs.Face aident dir -> failure x
transSide :: Exp.Abs.Side -> Result
transSide x = case x of
  Exp.Abs.Side faces exp -> failure x
transFormula :: Exp.Abs.Formula -> Result
transFormula x = case x of
  Exp.Abs.Disj formula1 formula2 -> failure x
  Exp.Abs.Conj formula1 cident formula2 -> failure x
  Exp.Abs.Neg formula -> failure x
  Exp.Abs.Atom aident -> failure x
  Exp.Abs.Dir dir -> failure x
transBranch :: Exp.Abs.Branch -> Result
transBranch x = case x of
  Exp.Abs.OBranch aident aidents expwhere -> failure x
  Exp.Abs.PBranch aident aidents1 aidents2 expwhere -> failure x
transLabel :: Exp.Abs.Label -> Result
transLabel x = case x of
  Exp.Abs.OLabel aident teles -> failure x
  Exp.Abs.PLabel aident teles aidents system -> failure x
transTele :: Exp.Abs.Tele -> Result
transTele x = case x of
  Exp.Abs.Tele aident aidents exp -> failure x
transPTele :: Exp.Abs.PTele -> Result
transPTele x = case x of
  Exp.Abs.PTele exp1 exp2 -> failure x

